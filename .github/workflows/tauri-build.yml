name: Tauri Build

on:
  workflow_dispatch:
    inputs:
      os:
        description: "ビルド対象OS"
        required: true
        default: all
        type: choice
        options: [all, ubuntu, macos, windows]

permissions:
  contents: read  # 最小権限

concurrency:
  group: tauri-build-${{ github.ref }}-${{ github.event.inputs.os || 'all' }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.os }})
    # macOSのアーキが要件に合うよう必要なら macos-13 を選択
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    if: |
      inputs.os == 'all' ||
      (inputs.os == 'ubuntu' && matrix.os == 'ubuntu-latest') ||
      (inputs.os == 'macos' && matrix.os == 'macos-latest') ||
      (inputs.os == 'windows' && matrix.os == 'windows-latest')

    timeout-minutes: 60

    env:
      # ⚠️ VITE_* は配布物に埋め込まれます。秘密は入れない設計に！
      VITE_LLM_PROVIDER: ${{ secrets.VITE_LLM_PROVIDER }}
      VITE_GOOGLE_API_KEY: ${{ secrets.VITE_GOOGLE_API_KEY }}
      VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Enable Corepack and activate pnpm
        shell: bash
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare pnpm@10.11.0 --activate
          pnpm -v
          echo "pnpm store: $(pnpm store path)"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile=true

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # より堅牢なRustキャッシュ
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            src-tauri -> src-tauri/target

      # 旧来のcacheを使う場合は鍵にrustcも含める
      # - name: Cache Cargo target
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       target
      #       src-tauri/target
      #     key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}-${{ steps.rustv.outputs.rustc }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-target-

      - name: Verify LLM env
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${VITE_LLM_PROVIDER:-}" ]]; then
            echo "VITE_LLM_PROVIDER secret is not set. Set to 'google' or 'openai'." >&2
            exit 1
          fi
          if [[ "${VITE_LLM_PROVIDER}" == "openai" && -z "${VITE_OPENAI_API_KEY:-}" ]]; then
            echo "VITE_OPENAI_API_KEY is required when VITE_LLM_PROVIDER=openai." >&2
            exit 1
          fi
          if [[ "${VITE_LLM_PROVIDER}" != "openai" && -z "${VITE_GOOGLE_API_KEY:-}" ]]; then
            echo "VITE_GOOGLE_API_KEY is required when VITE_LLM_PROVIDER is not 'openai'." >&2
            exit 1
          fi

      - name: Type check
        run: pnpm check

      # ★ 重複するなら片方に統一：必要なら残す
      #- name: Build web
      #  run: pnpm build

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # macOS 公証するなら以下を追加（証跡に応じて）
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Windows Authenticodeするなら以下のような証明書設定も検討
          # WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          # WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: |
            src-tauri/target/**/bundle/**
          if-no-files-found: warn
